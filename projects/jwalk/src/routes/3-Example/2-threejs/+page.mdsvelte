<script lang="ts" context="module">
    import Three from "./Three.svelte";
    import Content from "./Content.svelte";
    import type { Data } from "./Content.svelte";
</script>

<script lang="ts">
    let canvas: HTMLCanvasElement;
    let data = `{
    "a": [1, 0, 0],
    "b": [0, 0, 0],
    "c": [-1, 0, 0]
}`;
    let currentData: Data = {
        a: [0, 0, 0],
        b: [0, 0, 0],
        c: [0, 0, 0]
    };
    type Box = [number, number, number];

    const jsonify = (d: string) => {
        try {
            const tmp = JSON.parse(d) as Data;
            for (const v of Object.values(tmp)) {
                if (v.length !== 3) {
                    throw new Error("invalid data");
                }
            }
            currentData = tmp;
        } catch {}
        return currentData as Data;
    };
</script>

# ThreeJS

```ts
const j = jwalker<Object3D>()
    .type("position", [{ type: "tuple", value: ["number", "number", "number"] }])
    .node("box", "position", {
        action: (target, { value }) => {
            const ref = new Object3D();
            ref.add(new Mesh(geometry, material));
            ref.add(new LineSegments(edges, edgeMaterial));

            ref.position.set(...value);
            target.add(ref);
            return {
                update: (v) => ref.position.set(...v),
                destroy: () => target.remove(ref)
            };
        }
    })
    .node("ROOT", "map", { value: "box" })
    .build(scene, data);

// Called whenever data is modified
j.update(data);

// Call during cleanup
j.destroy();
```

<textarea bind:value={data} />
<br />
<canvas bind:this={canvas} />
{#if canvas}
    <Three {canvas} let:scene>
        <Content data={jsonify(data)} {scene} />
    </Three>
{/if}

<style>
    canvas {
        width: 500px;
        height: 500px;
        outline: solid 1px red;
    }
    textarea {
        box-sizing: border-box;
        width: 500px;
        height: 100px;
    }
</style>
