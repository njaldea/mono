## actions

In this example, there are two actions provided.
- viewer
- editor

These will be used for two separate `jwalk` instance.

The only difference between them are:
- adapter
  - omitted to simplify the example
  - this is added to make it compatible with svelte actions since Node/Context are not just HTMLElements
- Components used
  - VPoint/EPoint

### viewer

```ts
export const viewer = () => {
    return jwalker<Node>()
        .node("Point", "tuple", {
            value: [{ type: "number" }, { type: "number" }] as const,
            action: ({ context, target }, { value }) => {
                const component = new VPoint({
                    target,
                    props: { value: value, context }
                });
                return {
                    update: (value) => component.$set({ value }),
                    destroy: () => component.$destroy()
                };
            }
        })
        .node("Group", "object", {
            action: ({ context, target }, { value, actions }) => {
                const component = new Object({
                    target,
                    props: {
                        value,
                        actions,
                        title: context.key ? `Group - ${context.key}` : "Group",
                        context,
                        adapter: vadapter
                    }
                });
                return {
                    update: (value) => component.$set({ value }),
                    destroy: () => component.$destroy()
                };
            }
        });
};

```


### editor

```ts
export const editor = () => {
    return jwalker<Node>()
        .node("Point", "tuple", {
            value: [{ type: "number" }, { type: "number" }] as const,
            action: ({ target, context }, detail) => {
                const component = new EPoint({
                    target,
                    props: { value: detail.value, context }
                });
                return {
                    update: (value) => component.$set({ value }),
                    destroy: () => component.$destroy()
                };
            }
        })
        .node("Group", "object", {
            action: ({ target, context }, detail) => {
                const component = new Object({
                    target,
                    props: {
                        value: detail.value,
                        actions: detail.actions,
                        title: context.key ? `Group - ${context.key}` : "Group",
                        context,
                        adapter: eadapter
                    }
                });
                return {
                    update: (value) => component.$set({ value }),
                    destroy: () => component.$destroy()
                };
            }
        });
};

```