## actions

In this example, there are two actions provided.
- viewer
- editor

These will be used for two separate `jwalk` instance.

The only difference between them are:
- toSvelteAction
  - omitted to simplify the example
  - this is added to make it compatible with svelte actions since Node/Context are not just HTMLElements
- Components used
  - VPoint/EPoint

### viewer

```ts
export const viewer = () => {
    return jwalker<Node>()
        .node("Point", "tuple", {
            value: ["number", "number"],
            action: ({ context, target }, { value }) => {
                return toSvelteAction(VPoint, target, { value: value, context });
            }
        })
        .node("Group", "object", {
            value: ["123:Point"],
            action: ({ target, context }, { value, auto }) => {
                return toSvelteAction(Object, target, {
                    value,
                    actions: auto,
                    title: context.key ? `Group - ${context.key}` : "Group",
                    context
                });
            }
        })
        .node("ROOT", "object", {
            value: ["subgroup:Group", "point:Point", "point35:Point"],
            action: ({ target, context }, { value, auto }) => {
                return toSvelteAction(Object, target, {
                    value,
                    actions: auto,
                    title: context.key ? `Group - ${context.key}` : "Group",
                    context
                });
            }
        });
};

```


### editor

```ts
export const editor = () => {
    return jwalker<Node>()
        .node("Point", "tuple", {
            value: ["number", "number"],
            action: ({ context, target }, { value }) => {
                return toSvelteAction(EPoint, target, { value: value, context });
            }
        })
        .node("Group", "object", {
            value: ["123:Point"],
            action: ({ target, context }, { value, auto }) => {
                return toSvelteAction(Object, target, {
                    value,
                    actions: auto,
                    title: context.key ? `Group - ${context.key}` : "Group",
                    context
                });
            }
        })
        .node("ROOT", "object", {
            value: ["subgroup:Group", "point:Point", "point35:Point"],
            action: ({ target, context }, { value, auto }) => {
                return toSvelteAction(Object, target, {
                    value,
                    actions: auto,
                    title: context.key ? `Group - ${context.key}` : "Group",
                    context
                });
            }
        });
};

```