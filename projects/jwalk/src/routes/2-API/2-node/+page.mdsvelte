# `node(...)`

```ts
const j = jwalker<T>()
    .node("slider", "number", {
        action: (context, { value }) => {
            /** initialization **/
            return {
                update: (v) => { /** update  **/ },
                destroy: () => { /** cleanup **/ }
            }
        }
    });
```

## Arguments

| arguments    | description                     |
| ------------ | ------------------------------- |
| type         |                                 |
| aliased type | prime or group type             |
| detail       | additional required information |

### Detail

| key    | required for       | description                                               |
| ------ | ------------------ | --------------------------------------------------------- |
| value  | for group type     | describes the group type                                  |
| refs   | for non-group type | additional accessible actions                             |
| action | all                | method that describes what to do when traversing the node |

#### value

| alias type | example                     | inferred type                |
| ---------- | --------------------------- | ---------------------------- |
| list       | `"boolean"`                 | `boolean[]`                  |
| map        | `"boolean"`                 | `Record<string, boolean>`    |
| tuple      | `["boolean", "string"]`     | `[boolean, string]`          |
| object     | `["a:boolean", "b:string"]` | `{ a: boolean; b: string; }` |

#### action

For non-group type

```ts
(context: T, detail: { value, refs, meta }) => {
    update: (v) => void;
    destroy: () => void;
}
```

For group typeof

```ts
(context: T, detail: { value, refs, meta, auto }) => {
    update: (v) => void;
    destroy: () => void;
}
```

| field | description                                                                             |
| ----- | --------------------------------------------------------------------------------------- |
| value | current value of the node                                                               |
| refs  | an object where key is the node name and the vale is an equivalent action for that node |
| meta  | contains additional information that users might use                                    |
| auto  | a helper method that let's jwalk handle node propagation. **optional** for group type   |

#### meta

As of the moment, meta contains `value` for group type

for example:

```ts
const j = jwalker<T>()
    .node("point", "tuple", {
        value: ["number", "number"],
        action: (context, { value, meta }) => {
            // meta would be
            // {
            //     keys: [0, 1], // only for type inference.
            //     value: ["number", "number"]
            // }
            /** initialization **/
            return {
                update: (v) => { /** update  **/ },
                destroy: () => { /** cleanup **/ }
            }
        }
    });
```
