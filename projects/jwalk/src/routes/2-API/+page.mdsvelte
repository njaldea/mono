# API

`jwalk` is heavily inspired by the api of [svelte actions](https://svelte.dev/docs/svelte-action) but is customizable to receive any type of `node` (`T` in jwalk context).

## `jwalker`

`jwalker` is the main entry point in using the library.

It is a builder where users can add `types` or `nodes` to be used in the schema.

```ts
const j = jwalker<T>(options);
```

### Options

```ts
type Options = {
    /**
     * by default, jwalk does not memoize the value.
     * thus, even if the value does not change, the action for the node will be executed still.
     */
    memoizer?: <Value>(value: Value) => (v: Value) => boolean;
};
```

### memoizer

`jwalk` provides a memoizer that provides a simple way to memoize the value.

```ts
import { jwalker, memoizer } from "@nil-/jwalk";
const builder = jwalker<Object3D>({ memoizer });
```

## Terminologies

| term    | meaning                                                     |                                        |
| ------- | ----------------------------------------------------------- | -------------------------------------- |
| Context | object passed forward to each node when traversing          |                                        |
| Prime   | a type supported by jwalk/builder                           | registered through `builder.type(...)` |
| Node    | a type that has an equivalent action                        | registered through `builder.node(...)` |
| action  | a method that represents a code to be exected for the node  |                                        |