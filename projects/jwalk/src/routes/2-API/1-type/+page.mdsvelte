# `type(...)`

```ts
const j = jwalker<T>()
    .type(
        "point",
        [
            { type: "boolean" },
            { type: "tuple", value: [ "number",  "number" ] },
        ]
    );
```

Where `point` will be inferred as `readonly [ number, number ] | boolean`.

These types are will be called `Prime` types which can be used all through out the builder.

`Prime` types available by default:
- "number" as `number`
- "boolean" as `boolean`
- "string" as `string`

### Arguments

- type
- list of types detail

<table>
    <thead>
        <tr>
            <th>argument</th>
            <th>description</th>
            <th>type</th>
            <th>example</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>type</td>
            <td>name of the new prime type to be registered</td>
            <td><pre><code>{"string"}</code></pre></td>
            <td><pre><code>"point"</code></pre></td>
            <td>
                <pre>
                    <code>
Invalid values
---
"ROOT"
"list"
"tuple"
"map"
"object"
                    </code>
                </pre>
            </td>
        </tr>
        <tr>
            <td>detail</td>
            <td>list of descriptors that will indicate the type of the alias</td>
            <td><pre><code>{"{\n  type: string;\n  value?: string[];\n}[]"}</code></pre></td>
            <td><pre><code>{JSON.stringify([{ type: "boolean" }, { type: "tuple", value: ["boolean", "string"] }], null, 2)}</code></pre></td>
            <td>
                <code>type</code> is any prime types already registered to jwalk<br/>
                <code>value</code> is optional and only required for group types<br/>
            </td>
        </tr>
    </tbody>
</table>
