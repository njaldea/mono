<script lang="ts">
    import { Block, Instance, Controls, type Prop } from "$lib";
    import Component from "../../Component.svelte";

    const defaults = {
        vText: "text",
        vColor: "#ffffff",
        vNumber: 1,
        vRange: 3,
        vSelect: "select",
        vToggle: true,
        vArray: [1, "string", false, undefined] as [number, string, boolean, any],
        vObject: {
            vText: "world",
            vAny: undefined
        } as {
            vText: string;
            vAny: any;
        }
    };
    
    const props: Prop[] = [
        [ "vText", "text" ],
        [ "vColor", "color", "hex" ],
        [ "vNumber", "number" ],
        [ "vRange", "range", 0, 10, 1 ],
        [ "vSelect", "select", ["A", "B", "C"] ],
        [ "vToggle", "toggle" ],
        {
            name: "vArray",
            type: "tuple",
            values: [
                [ "number" ],
                [ "text" ],
                [ "toggle" ],
                [ "tuple", [["text"]] ]
            ]
        },
        {
            name: "vObject",
            type: "object",
            values: [
                [ "vText", "text" ],
                [ "vAny", "object", [[ "vText", "text" ]] ]
            ]
        }
    ];
</script>

# props

Controls allows to override the data passed to Instance/Template Props through their slot props.

Schema follows two format:
- more verbose object key-value structure
- flattened array

Mixing and matching of schema should work well.

To customize the controls, the following are the types that are currently supported by `@nil-/doc`.
- [Text](/3-Components/2-Block/2-Controls/3-props/1-Text)
- [Number](/3-Components/2-Block/2-Controls/3-props/2-Number)
- [Range](/3-Components/2-Block/2-Controls/3-props/3-Range)
- [Toggle](/3-Components/2-Block/2-Controls/3-props/4-Toggle)
- [Select](/3-Components/2-Block/2-Controls/3-props/5-Select)
- [Tuple](/3-Components/2-Block/2-Controls/3-props/6-Tuple)
- [Object](/3-Components/2-Block/2-Controls/3-props/7-Object)
- [Color](/3-Components/2-Block/2-Controls/3-props/8-Color)

<div class="root">

```svelte
<Block>
    <Instance
        defaults={{
            vText: "text",
            vColor: "#ffffff",
            vNumber: 1,
            vRange: 3,
            vSelect: "select",
            vToggle: true,
            vArray: [1, "string", false, undefined],
            vObject: {
                vText: "world",
                vAny: undefined
            }
        }}
        let:props
    >
        <Component {...props} tag={"tag"}/>
    </Instance>
    <Controls
        props={[
            [ "vText", "text" ],
            [ "vColor", "color", "hex" ],
            [ "vNumber", "number" ],
            [ "vRange", "range", 0, 10, 1 ],
            [ "vSelect", "select", ["A", "B", "C"] ],
            [ "vToggle", "toggle" ],
            {
                name: "vArray",
                type: "tuple",
                values: [
                    [ "number" ],
                    [ "text" ],
                    [ "toggle" ],
                    [ "tuple", [["text"]] ]
                ]
            },
            {
                name: "vObject",
                type: "object",
                values: [
                    [ "vText", "text" ],
                    [ "vAny", "object", [[ "vText", "text" ]] ]
                ]
            }
        ]}
    />
</Block>
```

    <div>
        <Block>
            <Instance {defaults} let:props let:events>
                <Component
                    {...props}
                    tag={"tag"}
                    on:left_click={events["left_click"]}
                    on:right_click={events["right_click"]}
                />
            </Instance>
            <Controls {props}/>
        </Block>
    </div>
</div>

---

## Helper Types

`@nil-/doc` provides helper types to help intellisense. The following are exported by the library:

<table>
    <thead>
        <tr>
            <th>Type</th>
            <th>Purpose</th>
            <th>Example</th>
            <th>Expanded Type</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Prop</td>
            <td>Union of all Prop Types.</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>PropType</td>
            <td>Use to select specific prop type.<br/>Works with the next types.<br/>Expects to receive the "type" to select.</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>Detailed</td>
            <td>Vebose Prop structure.</td>
            <td><pre><code>{"type T = Detailed<PropType<\"object\">>;"}</code></pre></td>
            <td><pre><code>{"type T = {\n    name: string;\n    type: \"object\";\n    values: Prop[];\n};"}</code></pre></td>
        </tr>
        <tr>
            <td>Flattened</td>
            <td>Arrayed Prop structure.</td>
            <td><pre><code>{"type T = Flattened<PropType<\"object\">>;"}</code></pre></td>
            <td><pre><code>{"type T = [\n    name: string,\n    type: \"object\",\n    values: Prop[]\n];"}</code></pre></td>
        </tr>
        <tr>
            <td>Unionized</td>
            <td>Union of Detailed and Flattened type</td>
            <td><pre><code>{"type T = Unionized<PropType<\"object\">>;"}</code></pre></td>
            <td><pre><code>{"type T =\n    | Detailed<PropType<\"object\">>\n    | Flattened<PropType<\"object\">>;"}</code></pre></td>
        </tr>
    </tbody>
</table>

---
<style>
    .root {
        display: grid;
        grid-auto-flow: column;
        gap: 10px;
    }

    tr > td > pre {
        background-color: transparent;
        padding: 5px;
        margin: 0px;
    }
</style>