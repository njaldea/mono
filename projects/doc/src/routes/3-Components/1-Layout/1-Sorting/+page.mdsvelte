<script lang="ts">
    import { Layout, sorter, Block, Instance, Controls } from "$lib";

    const routes = [ "/02-zephyr", "/banana", "/apple", "/1-random" ];
    let current = routes[0];
</script>

# Sorting

Since we are using directory-like structure for navigation, there is a need to be able to control the order of items to be listed in the tree and how it will be presented to the tree.

**By default**, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer">default string ordering</a> is used.

`sorter` prop is the callback used to override how to order the directories in the tree.

For ease of use, `@nil-/doc` provides a `sorter` method where:
- directories that matches `/(\d+)-(.+)/` `<number>-<text>`
    - considered higher in the sorting order
    - when compared with other directories that matches the same format, the number prefix is used for ordering


```svelte
<script>
    import { sorter } from "$nil-/doc";
</script>

<Layout
    data={[ "/02-zephyr", "/banana", "/apple", "/1-random" ]}
    current={"/02-zephyr"}
    on:navigate
    sorter={override ? sorter : undefined}
>
    <div slot="title">Sorting</div>
    <div>
        <p>Current: {current}</p>
        <p>Using {override ? "custom" : "default"} sorter</p>
    </div>
</Layout>
```

<Block>
    <Instance
        defaults={{ override: false }}
        let:props={{ override }}
    >
        <div class="layout">
            <Layout
                data={routes}
                {current}
                on:navigate={e => current = e.detail}
                sorter={override ? sorter : undefined}
            >
                <div slot="title">Sorting</div>
                <div class="content">
                    <p>Current: {current}</p>
                    <p>Using {override ? "custom" : "default"} sorter</p>
                </div>
            </Layout>
        </div>
    </Instance>
    <Controls
        props={[
            {
                name: "override",
                type: "switch"
            }
        ]}
        position="bottom"
    />
</Block>

<style>
    .layout {
        height: 500px;
    }

    .content {
        width: 100%;
        height: 100%;
        padding: 10px;
        outline: solid white 1px;
        box-sizing: border-box;
    }
</style>
